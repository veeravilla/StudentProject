//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.2-hudson-jaxb-ri-2.2-63- 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.06.23 at 06:09:59 PM CDT 
//


package com.test;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="sno" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *         &lt;element name="sname" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="course" type="{http://www.w3.org/2001/XMLSchema}double"/>
 *         &lt;element name="address" type="{http://www.test.com/}Address"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "sno",
    "sname",
    "course",
    "address"
})
@XmlRootElement(name = "Student")
public class Student implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected int sno;
    @XmlElement(required = true)
    protected String sname;
    protected double course;
    @XmlElement(required = true)
    protected Address address;

    /**
     * Default no-arg constructor
     * 
     */
    public Student() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public Student(final int sno, final String sname, final double course, final Address address) {
        this.sno = sno;
        this.sname = sname;
        this.course = course;
        this.address = address;
    }

    /**
     * Gets the value of the sno property.
     * 
     */
    public int getSno() {
        return sno;
    }

    /**
     * Sets the value of the sno property.
     * 
     */
    public void setSno(int value) {
        this.sno = value;
    }

    /**
     * Gets the value of the sname property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSname() {
        return sname;
    }

    /**
     * Sets the value of the sname property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSname(String value) {
        this.sname = value;
    }

    /**
     * Gets the value of the course property.
     * 
     */
    public double getCourse() {
        return course;
    }

    /**
     * Sets the value of the course property.
     * 
     */
    public void setCourse(double value) {
        this.course = value;
    }

    /**
     * Gets the value of the address property.
     * 
     * @return
     *     possible object is
     *     {@link Address }
     *     
     */
    public Address getAddress() {
        return address;
    }

    /**
     * Sets the value of the address property.
     * 
     * @param value
     *     allowed object is
     *     {@link Address }
     *     
     */
    public void setAddress(Address value) {
        this.address = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            int theSno;
            theSno = this.getSno();
            strategy.appendField(locator, this, "sno", buffer, theSno);
        }
        {
            String theSname;
            theSname = this.getSname();
            strategy.appendField(locator, this, "sname", buffer, theSname);
        }
        {
            double theCourse;
            theCourse = this.getCourse();
            strategy.appendField(locator, this, "course", buffer, theCourse);
        }
        {
            Address theAddress;
            theAddress = this.getAddress();
            strategy.appendField(locator, this, "address", buffer, theAddress);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof Student)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final Student that = ((Student) object);
        {
            int lhsSno;
            lhsSno = this.getSno();
            int rhsSno;
            rhsSno = that.getSno();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sno", lhsSno), LocatorUtils.property(thatLocator, "sno", rhsSno), lhsSno, rhsSno)) {
                return false;
            }
        }
        {
            String lhsSname;
            lhsSname = this.getSname();
            String rhsSname;
            rhsSname = that.getSname();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sname", lhsSname), LocatorUtils.property(thatLocator, "sname", rhsSname), lhsSname, rhsSname)) {
                return false;
            }
        }
        {
            double lhsCourse;
            lhsCourse = this.getCourse();
            double rhsCourse;
            rhsCourse = that.getCourse();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "course", lhsCourse), LocatorUtils.property(thatLocator, "course", rhsCourse), lhsCourse, rhsCourse)) {
                return false;
            }
        }
        {
            Address lhsAddress;
            lhsAddress = this.getAddress();
            Address rhsAddress;
            rhsAddress = that.getAddress();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "address", lhsAddress), LocatorUtils.property(thatLocator, "address", rhsAddress), lhsAddress, rhsAddress)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            int theSno;
            theSno = this.getSno();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sno", theSno), currentHashCode, theSno);
        }
        {
            String theSname;
            theSname = this.getSname();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sname", theSname), currentHashCode, theSname);
        }
        {
            double theCourse;
            theCourse = this.getCourse();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "course", theCourse), currentHashCode, theCourse);
        }
        {
            Address theAddress;
            theAddress = this.getAddress();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "address", theAddress), currentHashCode, theAddress);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof Student) {
            final Student copy = ((Student) draftCopy);
            int sourceSno;
            sourceSno = this.getSno();
            int copySno = strategy.copy(LocatorUtils.property(locator, "sno", sourceSno), sourceSno);
            copy.setSno(copySno);
            if (this.sname!= null) {
                String sourceSname;
                sourceSname = this.getSname();
                String copySname = ((String) strategy.copy(LocatorUtils.property(locator, "sname", sourceSname), sourceSname));
                copy.setSname(copySname);
            } else {
                copy.sname = null;
            }
            double sourceCourse;
            sourceCourse = this.getCourse();
            double copyCourse = strategy.copy(LocatorUtils.property(locator, "course", sourceCourse), sourceCourse);
            copy.setCourse(copyCourse);
            if (this.address!= null) {
                Address sourceAddress;
                sourceAddress = this.getAddress();
                Address copyAddress = ((Address) strategy.copy(LocatorUtils.property(locator, "address", sourceAddress), sourceAddress));
                copy.setAddress(copyAddress);
            } else {
                copy.address = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new Student();
    }

}
